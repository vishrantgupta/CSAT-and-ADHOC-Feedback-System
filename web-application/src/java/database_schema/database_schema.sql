/*
 * @author Vishrant Krishna Gupta
 * vg00124233@vishrant.com
*/
SELECT * FROM ENGAGEMENT;

UPDATE engagement SET act_ind = 'Y';

ALTER TABLE ENGAGEMENT ADD ACT_IND CHAR(1) CHECK (Upper(act_ind) IN ('Y', 'N'))

ALTER TABLE engagement MODIFY act_ind NOT NULL ENABLE;

-- Instead of below trigger create procedure to insert new row
/*CREATE OR REPLACE TRIGGER engmt_act_to_upper_trigger
before insert or update on engagement
  for each row
declare
  dup_flag char;
BEGIN
  -- FORCE ALL ROLE_NAME TO UPPER CASE
  :NEW.act_ind := UPPER(:NEW.act_ind);
END;
/*/

/*CREATE OR REPLACE PROCEDURE insertAppDetails
(V_APP_NAME IN VARCHAR, V_ENGAGEMENT_ID IN NUMBER, V_CREATED_BY IN APP.CREATED_BY%type, V_CLIENT_MAPPING_STR IN VARCHAR) AS
V_APP_COUNT NUMBER; V_APP_ID NUMBER;*/

CREATE OR REPLACE PROCEDURE insertAppDetails
(V_APP_NAME IN VARCHAR, V_ENGAGEMENT_ID IN NUMBER, V_CREATED_BY IN APP.CREATED_BY%type, V_CLIENT_MAPPING_STR IN VARCHAR) AS
V_APP_COUNT NUMBER; V_APP_ID NUMBER;

CURSOR C_CLIENT_ID
  IS
  SELECT regexp_substr(V_CLIENT_MAPPING_STR,'[^,]+', 1, level) as CLIENT_ID from dual connect by regexp_substr(V_CLIENT_MAPPING_STR, '[^,]+', 1, level) is not null;
V_CLIENT_ID C_CLIENT_ID%ROWTYPE;
BEGIN
  
    SELECT count(APP_NAME) INTO V_APP_COUNT FROM APP WHERE UPPER(APP_NAME) = UPPER(V_APP_NAME) AND ENGAGEMENT_ID = V_ENGAGEMENT_ID;
    IF V_APP_COUNT > 0 THEN
      RAISE_APPLICATION_ERROR(-20999,'App with this name already exists');
    ELSE
      INSERT INTO APP (APP_ID, APP_NAME, ENGAGEMENT_ID, CREATED_BY) VALUES (APP_ID_SEQ.NEXTVAL, V_APP_NAME, V_ENGAGEMENT_ID, V_CREATED_BY);
      SELECT APP_ID INTO V_APP_ID FROM APP WHERE APP_NAME = V_APP_NAME AND ENGAGEMENT_ID = V_ENGAGEMENT_ID AND CREATED_BY = V_CREATED_BY;
      
      FOR V_CLIENT_ID IN C_CLIENT_ID LOOP
          SELECT COUNT(*) INTO V_APP_COUNT FROM APP_CLIENT_MAPPING WHERE APP_ID = V_APP_ID AND CLIENT_ID = V_CLIENT_ID.CLIENT_ID;
          
          IF V_APP_COUNT = 0 THEN
            INSERT INTO APP_CLIENT_MAPPING (APP_ID, CLIENT_ID) VALUES (V_APP_ID, trim(V_CLIENT_ID.CLIENT_ID));
          END IF;
      END LOOP;
      
    END IF;
END;


-- CREATE OR REPLACE PROCEDURE updateAppDetails
-- (V_APP_ID IN NUMBER, V_APP_NAME IN VARCHAR, V_CLIENT_NAME IN VARCHAR, V_ENGAGEMENT_ID IN NUMBER) AS
-- V_APP_COUNT NUMBER;
-- BEGIN
--     SELECT count(APP_NAME) INTO V_APP_COUNT FROM APP WHERE UPPER(APP_NAME) = UPPER(V_APP_NAME) AND ENGAGEMENT_ID = V_ENGAGEMENT_ID;
--     IF V_APP_COUNT > 0 THEN
--       RAISE_APPLICATION_ERROR(-20999,'App with this name already exists');
--     ELSE
--         UPDATE APP
--           SET APP_NAME      = V_APP_NAME,
--             CLIENT_NAME     = V_CLIENT_NAME
--           WHERE APP_ID      = V_APP_ID
--           AND ENGAGEMENT_ID = V_ENGAGEMENT_ID;
--     END IF;
-- END;

--3rd APR CHANGE

DROP TRIGGER engmt_act_to_upper_trigger;

-- DROP UNIQUE SEQUENCE CREATED FOR engmt_act_to_upper_trigger AND CREATE PROCEDURE TO INSERT RECORDS

alter table users add CONSTRAINT u_user_name unique (user_name);

ALTER TABLE ENGAGEMENT ADD CREATE_DATE DATE DEFAULT SYSDATE;
ALTER TABLE ENGAGEMENT ADD CREATED_BY VARCHAR2(20);
ALTER TABLE ENGAGEMENT ADD FOREIGN KEY (CREATED_BY) REFERENCES USERS(USER_ID);
UPDATE ENGAGEMENT SET CREATED_BY = 'vg00124233';
ALTER TABLE ENGAGEMENT MODIFY CREATED_BY VARCHAR2(20) NOT NULL

CREATE OR REPLACE PROCEDURE insertEngagementDetails
(V_ENGAGEMENT_NAME IN VARCHAR, V_DESCRIPTION IN VARCHAR, V_CREATED_BY IN VARCHAR) AS
V_ENGAGEMENT_COUNT NUMBER;
BEGIN
    SELECT count(ENGAGEMENT_NAME) INTO V_ENGAGEMENT_COUNT FROM ENGAGEMENT WHERE UPPER(ENGAGEMENT_NAME) = UPPER(V_ENGAGEMENT_NAME);
    IF V_ENGAGEMENT_COUNT > 0 THEN
      RAISE_APPLICATION_ERROR(-20999,'Engagement with this name already exists');
    ELSE
      INSERT INTO engagement (engagement_id, engagement_name, act_ind, description, CREATE_DATE, CREATED_BY) values (FEEDBACK_ID_SEQ.NEXTVAL, V_ENGAGEMENT_NAME, 'Y', V_DESCRIPTION, SYSDATE, V_CREATED_BY);
    END IF;
END;

ALTER TABLE APP ADD CREATE_DATE DATE DEFAULT SYSDATE;

CREATE OR REPLACE PROCEDURE updateAppDetails
(V_APP_ID IN NUMBER, V_APP_NAME IN VARCHAR, V_CLIENT_NAME IN VARCHAR, V_ENGAGEMENT_ID IN NUMBER) AS
V_APP_COUNT NUMBER; T_APP_NAME APP.APP_NAME%type;
BEGIN
    SELECT count(APP_NAME) INTO V_APP_COUNT FROM APP WHERE UPPER(APP_NAME) = UPPER(V_APP_NAME) AND ENGAGEMENT_ID = V_ENGAGEMENT_ID;
    IF V_APP_COUNT > 0 THEN
      SELECT APP_NAME INTO T_APP_NAME FROM APP WHERE APP_ID = V_APP_ID;
      IF T_APP_NAME = V_APP_NAME THEN
        UPDATE APP
          SET CLIENT_NAME     = V_CLIENT_NAME
          WHERE APP_ID      = V_APP_ID
          AND ENGAGEMENT_ID = V_ENGAGEMENT_ID;
      ELSE
        RAISE_APPLICATION_ERROR(-20999,'App with this name already exists');
      END IF;
    ELSE
        UPDATE APP
          SET APP_NAME      = V_APP_NAME,
            CLIENT_NAME     = V_CLIENT_NAME
          WHERE APP_ID      = V_APP_ID
          AND ENGAGEMENT_ID = V_ENGAGEMENT_ID;
    END IF;
END;

INSERT INTO ROLE (ROLE_NAME, ROLE_DESC) VALUES ('CF_ADMIN', 'Customer feedback administrator role');
INSERT INTO ROLE (ROLE_NAME, ROLE_DESC) VALUES ('ENGAGEMENT_ADMIN', 'Engagement admin');
INSERT INTO ROLE (ROLE_NAME, ROLE_DESC) VALUES ('S_ENGAGEMENT_OPERATIONS', 'Engagement operations');
INSERT INTO ROLE (ROLE_NAME, ROLE_DESC) VALUES ('S_APPLICATION_OPERATIONS', 'Application operations');


--PENDING

--TODO ALTER TABLE USER SET USERNAME PASSWORD FIELDS TO VARCHAR2(50)

-- 3rd APR Office
ALTER TABLE ENGAGEMENT
DROP CONSTRAINT SYS_C005400; -- FOREIGN CONSTRAINT

ALTER TABLE ENGAGEMENT DROP COLUMN CREATED_BY;
ALTER TABLE ENGAGEMENT ADD CREATED_BY NUMBER;
ALTER TABLE ENGAGEMENT ADD FOREIGN KEY (CREATED_BY) REFERENCES USERS(USER_ID);
ALTER TABLE ENGAGEMENT MODIFY CREATED_BY NUMBER NOT NULL;

-- TODO ALTER TABLE APP ADD COLUMN WITH CREATED_BY

ALTER TABLE FEEDBACK DROP CONSTRAINT SYS_C004246 -- DROP UNIQUE CONSTRAINT
ALTER TABLE ENGAGEMENT MODIFY ENGAGEMENT_NAME VARCHAR2(50);

-- FOR USER APP MAPPING
CREATE TABLE USER_APP_MAPPING(USER_ID NUMBER REFERENCES USERS(USER_ID), APP_ID REFERENCES APP(APP_ID));
ALTER TABLE USER_APP_MAPPING ADD CONSTRAINT U_USER_MAPPING UNIQUE (USER_ID, APP_ID);

ALTER TABLE USERS MODIFY USER_NAME VARCHAR2(100);
ALTER TABLE USERS MODIFY PASSWORD VARCHAR2(100);

CREATE OR REPLACE PROCEDURE updatePassword
(V_OLD_PASSWORD USERS.PASSWORD%type, V_NEW_PASSWORD USERS.PASSWORD%type, V_USER_ID USERS.USER_ID%type, V_USER_NAME USERS.USER_NAME%type) AS
V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*)
      INTO V_COUNT
      FROM USERS
     WHERE UPPER(USER_NAME)   = UPPER(V_USER_NAME)
       AND USER_ID            = V_USER_ID
       AND PASSWORD           = V_OLD_PASSWORD;
    IF V_COUNT = 1 THEN
      UPDATE USERS SET PASSWORD = V_NEW_PASSWORD WHERE UPPER(USER_NAME) = UPPER(V_USER_NAME) AND USER_ID = V_USER_ID;
    ELSE
      RAISE_APPLICATION_ERROR(-20999,'Old password does not match');
    END IF;
END;


ALTER TABLE APP ADD CREATED_BY NUMBER;
ALTER TABLE APP ADD FOREIGN KEY (CREATED_BY) REFERENCES USERS(USER_ID);
ALTER TABLE APP MODIFY CREATED_BY NUMBER NOT NULL;

--18th APR
ALTER TABLE USERS ADD LAST_LOGIN DATE

CREATE TABLE CLIENT_DETAILS (CLIENT_ID NUMBER PRIMARY KEY, FIRST_NAME VARCHAR2(25), LAST_NAME VARCHAR2(25));

CREATE SEQUENCE client_id_seq;

create or replace TRIGGER CLIENT_ID_TRIGGER
  BEFORE INSERT ON CLIENT_DETAILS
  FOR EACH ROW
BEGIN
   select client_id_seq.nextval into :NEW.CLIENT_ID from   dual;
END;

ALTER TABLE CLIENT_DETAILS ADD ENGAGEMENT_ID REFERENCES ENGAGEMENT(ENGAGEMENT_ID);
ALTER TABLE CLIENT_DETAILS ADD CREATED_BY NUMBER REFERENCES USERS(USER_ID);
ALTER TABLE CLIENT_DETAILS ADD CREATED_DATE DATE DEFAULT SYSDATE

CREATE OR REPLACE PROCEDURE insertClientDetails
(V_C_FIRST_NAME IN VARCHAR, V_C_LAST_NAME IN VARCHAR, V_ENGAGEMENT_ID IN NUMBER, V_CREATED_BY IN CLIENT_DETAILS.CREATED_BY%type) AS
V_CLIENT_COUNT NUMBER;
BEGIN
    SELECT count(*) INTO V_CLIENT_COUNT FROM CLIENT_DETAILS WHERE UPPER(FIRST_NAME) = UPPER(V_C_FIRST_NAME) AND UPPER(LAST_NAME) = UPPER(V_C_LAST_NAME) AND ENGAGEMENT_ID = V_ENGAGEMENT_ID;
    IF V_CLIENT_COUNT > 0 THEN
      RAISE_APPLICATION_ERROR(-20999,'Client with this name already exists');
    ELSE
      INSERT INTO CLIENT_DETAILS (FIRST_NAME, LAST_NAME, ENGAGEMENT_ID, CREATED_BY) VALUES (V_C_FIRST_NAME, V_C_LAST_NAME, V_ENGAGEMENT_ID, V_CREATED_BY);
    END IF;
END;

CREATE TABLE APP_CLIENT_MAPPING (APP_ID NUMBER REFERENCES APP(APP_ID), CLIENT_ID NUMBER REFERENCES CLIENT_DETAILS(CLIENT_ID));

ALTER TABLE APP MODIFY CLIENT_NAME NULL;
ALTER TABLE APP_CLIENT_MAPPING ADD CONSTRAINT U_APP_CLIENT_MAPPING UNIQUE(APP_ID, CLIENT_ID);
